syntax = "proto3";

option java_multiple_files = true;
option java_package = "kz.grpc.dfs";
option java_outer_classname = "DfsProto";
option objc_class_prefix = "HLW";

package alittlela;

service DfsService {
  // backend -> master
  //chunck
  rpc ChunkQuery(FileName) returns (stream ChunkQueryResult) {}
  rpc LeaseQuery(LeaseQueryReq) returns (LeaseQueryResult) {}
  //metadata
  rpc CreateFile (FileName) returns (Result) {}
  rpc MoveFileToBin (FileName) returns (Result) {}
  rpc MoveFileFromBin (FileName) returns (Result) {}
  rpc GetFileList (Empty) returns (stream FileName) {}
  rpc GetFileListFromBin (Empty) returns (stream FileName) {}
  rpc DeleteFile(FileName) returns (Result) {}
  rpc CloseFile(FileName) returns (Result) {}
  //lock
  rpc LockCell (CellLocation) returns (Result) {}
  rpc ReleaseCell (CellLocation) returns (Result) {}

  //backend->chunckserver
  // ChunkServer
  rpc ChunkRead(ChunkReadReq) returns (ChunkData) {}
  rpc AppendPrepare(AppendPrepareReq) returns (AppendPrepareResult) {}
  // AppendExec is sent from client to the primary to execute a pending append
  rpc PrimaryAppendExec(AppendReq) returns (Result) {}

  //primary->secondary
  // Sent from a primary to all secondary to execute a pending append
  rpc SecondaryAppendExec(SecondaryAppendReq) returns (Result) {}
}

//backend -> master
message FileName {
  string name = 1;
}

message ChunkQueryResult {
  Id id = 1;
  repeated string chunkServers = 2;
}

message LeaseQueryReq {
  string name = 1;
  uint32 newChunkRequired = 2; // 1: new chunk required
}

message LeaseQueryResult {
  Id id = 1;
  string primary = 2;
  repeated string secondaries = 3;
}

message Id {
  string id = 1;
}

message Empty {}

message Result {
  int32 status = 1;
  string message = 2;
}

message CellLocation {
  string name = 1;
  int32 sheet = 2;
  int32 row = 3;
  int32 column = 4;
}

//backend->chunckserver
message ChunkReadReq {
  // string representation of the chunk id
  Id id = 1;
  // byte range [start, end)
  uint32 start = 2;
  uint32 end = 3;
}

message AppendPrepareReq {
  Id id = 1;
  Id appendId = 2;
  ChunkData data = 3;
}

message AppendPrepareResult {
  uint32 status = 1; // 0 for ok, 1 for chunk size limit reached
  string message = 2;
}

message AppendReq {
  Id appendId = 1; // the id of append
  repeated string secondaries = 2; // all the secondaries associated with the append
}

message ChunkData {
  bytes data = 1;
}

//primary->secondary
message SecondaryAppendReq {
  Id apppendId = 1; // the id of append
  uint32 offset = 2; // the offset of this append in the chunk
}
