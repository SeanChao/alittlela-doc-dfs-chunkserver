/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.alittlela;

import org.junit.Rule;
import org.junit.jupiter.api.Test;

import io.grpc.inprocess.InProcessChannelBuilder;
import io.grpc.inprocess.InProcessServerBuilder;
import io.grpc.testing.GrpcCleanupRule;

import static org.junit.Assert.assertEquals;

import java.io.IOException;

import com.google.protobuf.ByteString;

class ChunkServerTest {

	/**
	 * This rule manages automatic graceful shutdown for the registered servers and
	 * channels at the end of test.
	 */
	@Rule
	public final GrpcCleanupRule grpcCleanup = new GrpcCleanupRule();

	/**
	 * To test the server, make calls with a real stub using the in-process channel,
	 * and verify behaviors or state changes from the client side.
	 */
	@Test
	void chunkReadImpl() throws Exception {
		ChunkServer server = new ChunkServer();
		var blockingStub = initRpc(server);

		ChunkData reply = blockingStub
				.chunkRead(ChunkReadReq.newBuilder().setId(Id.newBuilder().setId("").build()).build());

		byte[] testData = new byte[] { 'b', 'e', 'e', 'f' };
		assertEquals(ByteString.copyFrom(testData), reply.getData());
	}

	@Test
	void appendPrepareRpc() throws Exception {
		ChunkServer server = new ChunkServer();
		var stub = initRpc(server);
		AppendPrepareReq req = AppendPrepareReq.newBuilder().setId(Id.newBuilder().setId("answer").build())
				.setData(ChunkData.newBuilder().setData(ByteString.copyFrom("42".getBytes())).build()).build();
		stub.appendPrepare(req);
		assertEquals(1, server.getPendingAppends().size());
	}

	private DfsServiceGrpc.DfsServiceBlockingStub initRpc(ChunkServer server) throws IOException {
		// Generate a unique in-process server name.
		String serverName = InProcessServerBuilder.generateName();

		// Create a server, add service, start, and register for automatic graceful
		// shutdown.
		grpcCleanup.register(InProcessServerBuilder.forName(serverName).directExecutor()
				.addService(server.new ChunkServerImpl()).build().start());

		DfsServiceGrpc.DfsServiceBlockingStub blockingStub = DfsServiceGrpc.newBlockingStub(
				// Create a client channel and register for automatic graceful shutdown.
				grpcCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));
		return blockingStub;
	}
}
